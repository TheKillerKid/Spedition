/*
 * CSS Pie Chart from HTML tables.
 *
 * TODO:
 * ~~~~~
 * Do the same without the "--start" variable.
 * Find a way to move the accumulated amount of
 * the "--size" vars to the next TR>TD.
 * Try counters, combinators (~ general sibling
 * and + adjacent sibling) and other techniques.
 */

* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

body {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100vh;
    background-color: #001;
    color: #fff;
}

@mixin position-fullwidth {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    display: flex;
    justify-content: center;
}

.chart {
    display: block;
    margin: 0;
    padding: 0;
    border: 0;
    caption, thead, tfoot

{
    display: none;
}

tbody {
    position: relative;
    // Create a circle display: block;
    width: 100%;
    height: 0;
    // Old hack before "aspect-ratio" padding-block-end: 100%;
    // makes height 100% of the width aspect-ratio: 1 / 1;
    border-radius: 50%;
    tr

{
    th

{
    display: none;
}

td {
    @include position-fullwidth();
    transform: rotate( calc( 1turn * var( --start, 0 ) ) );
    background: conic-gradient( var( --color, transparent ) 0 calc( 100% * var( --size, 0 ) ), transparent 0 100% );
    // background-color: var(--color);
    // -webkit-mask-image: conic-gradient(red calc(100% * var(--size)), transparent calc(100% * var(--size)));
    // mask-image: conic-gradient(red calc(100% * var(--size)), transparent calc(100% * var(--size)));
    .data

{
    @include position-fullwidth();
    transform: rotate( calc( 0.5turn * var( --size, 0 ) ) );
    // top: -1.5rem;
}

}
}
}
}
